---
layout: post
title: "Redis 内存模型深入"
date: 2018-04-28 17:49:00 +0800
tags: [redis]
---

Redis 内存模型深入

## Redis 内存统计

* 使用`redis-cli -h {hostname} -p {port}`连接 redis
* 连接成功，使用`info memory`查看内存信息
```
used_memory:9451784  #分配器分配的内存总量
used_memory_human:9.01M  #上一行的人类看得懂的方式
used_memory_rss:12984320  #Redis进程占据操作系统的内存
used_memory_rss_human:12.38M
used_memory_peak:19658408
used_memory_peak_human:18.75M
used_memory_peak_perc:48.08%
used_memory_overhead:7657748
used_memory_startup"1424544
used_memory_dataset:1794036
used_memory_dataset_perc:22.35%
total_system_memory:16862044160
total_system_memory_human:15.70G
used_memory_lua:37888
used_memory_lua_human:37.00K
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
mem_fragmentation_ratio:1.37  #内存碎片比率
mem_allocator:jemalloc-4.0.3 # 内存分配器
active_defrag_running:0
lazyfree_pending_objects:0
```

* used_memory: Redis 分配的内存总量（包括使用的虚拟内存）；
* used_memory_rss: Redis 进程占据操作系统的内存，和 top 以及 ps 命令看到的是一样的；
即：used_memory + 进程运行内存 + 内存碎片 - 虚拟内存；
* mem_fragmentation_ratio: 内存碎片比，即 used_memory_rss/used_memory 。
小于1时说明内存不够用了，使用了虚拟内存；
越大说明内存碎片比越大，内存分配器是 jemalloc 的时候1.03是个较健康的状态。
* mem_allocator: 内存分配器。包括jemalloc(default)、libc、tcmalloc。

## 内存划分
1. 数据
值包括5种对外提供的类型：字符串、哈希、列表、集合、有序集合。  
Redis 内部对每种类型的值可能有2种或更多的内部编码实现。  
数据会统计在 used_memory 中。
2. 进程本身需要的内存
Redis 主进程本身运行，代码、常量池等需要占用的内存。  
不属于内存分配器分配，不会统计在 used_memory，但会统计在 used_memory_rss 中。
3. 缓冲内存
包括客户端缓冲区、复制积压缓冲区、AOF 缓冲区。  
由分配器分配，统计在 used_memory 和 used_memory_rss 中。
4. 内存碎片
内存碎片是 Redis 在分配、回收物理内存过程中产生的。  
如果对数据更改频繁，且数据之间的大小相差很大，会形成内存碎片。  
不统计在 used_memory 中，但会统计在 used_memory_rss 中。  
可以通过安全重启减小内存碎片。  

## Redis 数据存储细节
### 概述

当 Redis set hello world 的时候，它干了啥
![what Redis have done when set ‘hello world’](/images/redis-dictEntry.png)

-> **dictEntry** 每个键值对都有一个 dictEntry，里面包含指向 key 和 value 的指针；next 指向下一个 dictEntry，与本 key-value 无关。  
-> **key** 存储于 SDS 结构中  
```c
SDS:
struct sdsheader {
     int len;
     int free;
     char buf[];
}
```

-> **redisObject** 不管什么类型的 value 都存储在 redisObject 中。redisObject 中的 type 字段指明了 value 对象的类型，ptr 指向对象所在地址。而 redisObject 中的字符串对象仍然是通过 SDS 存储的。  
-> **jemalloc** 以上对象都需要内存分配器分配内存进行存储。

### redisObject
redisObject 对象非常重要，Redis 对象的类型、内部编码、内存回收、共享对象等功能，都需要 redisObject 支持。  
redisObject 的定义如下（不同版本的 Redis 可能稍有不同）：  
```c
typedef struct redisObject {
    unsigned type:4;
    unsigned encoding:4;
    unsigned lru:REDIS_LRU_BITS;
    int refcount;
    void *ptr;
} robj;
```
一个 redisObject 对象大小为 16 Bype。

* type: 对象类型
包括 REDIS_STRING、REDIS_LIST、REDIS_HASH、REDIS_SET、REDIS_ZSET。
* encoding: 对象的内部编码
每种数据类型都有至少两种 encoding。比如字符串有 int/embstr/raw 这三种。目的是优化性能。  
`object encoding {key}` 可查看对象编码方式。
* lru: 对象最后一次被命令程序访问的时间
当前时间 - 最后访问时间(ms)。  
`object idletime {key}` 查看对象空转时间，且不改变对象 lru 值。  
与 Redis 内存回收有关。如果 Redis 打开了 maxmemory 选项，且内存回收算法选择了 volatile-lru 或 allkeys-lru，会优先释放空转时间最长的对象。  

* refcount: 对象引用次数
refcount 主要用于对象的引用计数和内存回收。  
当创建新对象时，refcount 初始化为 1；值为 0 时，则该对象内存被释放。  
多次被引用的对象称为**共享对象**，目前只支持整数值的字符串对象。  
Redis 服务器在初始化时，会创建 10000 个字符串对象，为 0-9999 的整数值，Redis 可直接使用这些共享对象。  
关于此特性的调优考虑：尽可能使用 0/1 而非 Y/N。  
`object refcount {key}` 查看对象 value 引用次数。  

* ptr 数据指针  
指向 value 值。  

## SDS

即简单动态字符串（Simple Dynamic String）的缩写。  
### 结构

```c
struct sdshdr{
  int len;
  int free;
  char buf[];
};
```
* buf：字节数组，用来存储字符串；
* len：buf 已使用的长度；
* free：buf 未使用的长度。

例：
1. 存储一个无 free 的字符串 “Redis”
free = 0;
len = 5;
buf = ['R', 'e', 'd', 'i', 's', '\0'];

2. 存储一个有free 的字符串 “Redis”
free = 4;
len = 5;
buf = ['R', 'e', 'd', 'i', 's', '\0', , , , ];

根据以上可知，buf 数组的 length 实际上是 free + len + 1(字符串结尾的空字符)。  
所以一个 SDS 结构数据的长度为 4(free) + 4(len) + buf(free 的值 + len 的值 + 1) = free + len + 9。

### SDS 与 C 字符串的比较  
SDS 在 C 字符串的基础上加入了 free 和 len， 好处如下：  
* 获取字符串时的计算复杂度
SDS 是 O(1)，C 字符串是 O(n)；
* 缓存区溢出
C 字符串长度增加而忘记重新分配内存，容易造成缓冲区的溢出；  
SDS 记录了长度，可能会溢出时会自动重新分配内存。  
* 修改字符串时内存的重分配  
C 字符串修改，要重新分配内存（先释放再申请）；  
SDS 可做空间预分配策略，预先进行多余空间的分配，使得重新分配内存的概率减小。  
* 存取二进制数据  
C 字符串不可以，因为用空字符作为字符串结束标识；  
SDS 以长度 len 作为字符串结束标识。  
SDS 中的 buf 仍然使用了 C 字符串，因此 SDS 可以使用 C 字符串库中的部分函数；但只有当 SDS 存储文本数据时才可以这样使用，在存储二进制数据时则不行（‘\0’不一定是 buf 的结尾）。  

### SDS 与 C 字符串在 Redis 中的应用  
Redis 在存储对象时，包括 key 和不管什么形式的 value，一律使用 SDS。  
各种缓冲区，也使用 SDS。  
只有在字符串不会改变的情况下，如打印日志时，才会使用 C 字符串。  

## Redis 的对象类型与内部编码  
Redis 3.0 内部编码类型：  

| 类型 | 编码 | 对象 |
|:------|:-----|:------|
| REDIS_STRING | REDIS_ENCODING_INT | 使用整数值实现的字符串对象 |
| REDIS_STRING | REDIS_ENCODING_EMBSTR | 使用 embstr 编码的简单动态字符串实现的字符串对象 |
| REDIS_STRING | REDIS_ENCODING_RAW | 使用简单动态字符串实现的字符串对象 |
| REDIS_LIST | REDIS_ENCODING_ZIPLIST | 使用压缩列表实现的列表对象 |
| REDIS_LIST | REDIS_ENCODING_LINKEDLIST | 使用双端链表实现的列表对象 |
| REDIS_HASH | REDIS_ENCODING_ZIPLIST | 使用压缩列表实现的哈希对象 |
| REDIS_HASH | REDIS_ENCODING_HT | 使用字典实现的哈希对象 |
| REDIS_SET | REDIS_ENCODING_INTSET | 使用整数集合实现的集合对象 |
| REDIS_SET | REDIS_ENCODING_HT | 使用字典实现的集合对象  |
| REDIS_ZSET | REDIS_ENCODING_ZIPLIST | 使用压缩列表实现的有序集合对象 |
| REDIS_ZSET | REDIS_ENCODING_SKIPLIST | 使用跳跃表和字典实现的有序集合对象 |

### 字符串  
#### 概况  
字符串是最基础的类型，所有的键都是字符串类型，且字符串之外的其他几种复杂类型的元素也是字符串（？）。  
字符串长度不能超过 512 MB。  
#### 内部编码  
1. int
8 个字节的长整型。（其实就是 long）
2. embstr
<=39 字节的字符串。
3. raw
\>39 字节的字符串。  

* embstr 与 raw 的区别  
都使用 redisObject 和 SDS 保存数据，创建时，embstr 给 redisObject 和 SDS 只分配一次内存空间， raw 需要两次分别给 redisObject 和 SDS 分配空间。  
因此 embstr 创建时少分配一次空间，且地址连续；但如果字符串长度增加需要重新分配内存时，整个 redisObject 和 SDS 都需要重新分配空间，因此 Redis 中的 embstr 实现为只读。  

#### 编码转换  
int 不再是整数，或大小超出 long 的范围，自动转 raw。  
embstr 由于只读，只要修改 embstr 对象，一定转 raw。  

### 列表  
#### 概况
用来存储多个有序的字符串，每个字符串称为元素；  
一个列表可以存储 2^32-1 个元素；  
支持两端插入和弹出，并可获得指定位置或范围的元素。  
#### 内部编码  
1. 双端链表 linkedlist  
由一个 list 结构和多个 listNode 结构组成。   
链表中的所有结点指向的都是 type 为字符串的 redisObject
```c
typedef struct list { //双向链表   包括三个操作函数  
    listNode *head;  // 指向链表头结点
    listNode *tail;  // 指向链表尾结点
    void *(*dup)(void *ptr);//复制函数指针  
    void (*free)(void *ptr);//释放函数指针  
    int (*match)(void *ptr, void *key);//匹配函数指针  
    unsigned long len;  //节点计数  
} list;
```

2. 压缩列表 ziplist  
是由一系列特殊编码的连续内存块（而不是像双端链表一样每个节点都是指针）组成的顺序型数据结构。  
与双端链表相比，压缩列表可以节省内存空间，但是进行增删改时复杂度较高。  

* linkedlist 和 ziplist 的场景
节点多时，使用双端链表划算；节点少时，应使用压缩列表。  

#### 编码转换
同时满足以下两个条件使用 ziplist：1）列表元素数量小于 512 个；2）所有字符串对象都不足 64 个字节（单字符串，而非 SDS 结构）。  
ziplist 可以转 linkedlist，而 linkedlist 不能转 ziplist。

### 哈希

#### 概况
哈希同时也是 Redis 作为 Key-Value 数据库所使用的数据结构，不可混淆。  
#### 内部编码
1. 压缩列表 ziplist
    同上。  
    优势为集中存储，节省空间。  

2. 哈希表 hashtable

  ![hashtable struct](/images/redis-hashtable.jpg)

  Redis 数据库所使用的编码。  
  包含 1 个 dict 结构、2 个 dictht 结构 、1 个 dictEntry 指针数组 （即 bucket） 和多个 dictEntry 结构。  
* dictEntry  
用于保存键值对  
```c
typedef struct dictEntry{
  void *key; // 键值对中的键
  union{ // 键值对中的值（共同体）
    void *val; // 可能是指向型指针
    uint64_tu64; // 可能是 64 位整型
    int64_ts64; // 可能是无符号 64 位整型
  }v;
  struct dictEntry *next; // 下一个 dictEntry，用于解决哈希冲突
}dictEntry;
```
在 64 位系统中，一个 dictEntry 对象占 24 字节（key/val/next 各 8 字节）。
* bucket
即一个元素为 dictEntry 结构的数组。  
bucket 数组大小：取大于现有元素数量的最小的 2 的 n 次方。  
如 1000 个 dictEntry 的 bucket 大小为 1024;1100 个 dictEntry 的 bucket 大小为 2048。
* dictht  
```c
typedef struct dictht{
  dictEntry **table; // 指向 bucket
  unsigned long size; // bucket 的大小
  unsigned long sizemask; // =size-1，和哈希值一起决定一个键在 table 中存储的位置
  unsigned long used; // bucket 中已使用的 dictEntry 数量
}dictht;
```
* dict
```c
typedef struct dict{
  dictType *type;
  void *privdata;
  dictht ht[2];
  int trehashidx;
} dict;
```
\- type & privdata：为了适应不同类型的键值对，用于创建多态字典。  
\- ht & trehashidx：用于 rehash，即哈希表的扩展或收缩  
\- ht：指向两个 dictht。通常数据存在 ht[0] 中，rehash 时，将 ht[0] 的数据 rehash 到 ht[1] 中，然后将 ht[1] 赋值给 ht[0]，最后清空 ht[1]。  

dict 主要是用于适应不同类型的键值对以及 rehash。  

#### 编码转换  
转换规则与列表相似。  
同时满足以下两个条件使用 ziplist：1）哈希中元素数量小于 512 个；2）哈希中所有键和值字符串长度都不足 64 个字节。  
ziplist 可以转 hashtable，而 hashtable 不能转 ziplist。  

### 集合 set
#### 概况
集合与列表类似，都是用来保存多个字符串。  
与列表的区别：  
1. 集合中的元素是无序的，因此不能通过索引来操作元素  
2. 集合中的元素不能重复

一个集合最多可以存储 2^32-1 个元素。  
除了支持常规的增删改查，还支持多个集合取交集、并集、差集。  

#### 内部编码

1. 哈希表 hashtable
字典的每个键都是一个字符串对象， 每个字符串对象包含了一个集合元素， 而字典的值则全部被设置为 NULL。  
其余同前，略。    
2. 整数集合 intset
```c
typedef struct intset{
  uint32_t encoding; // contents 存储类型
  uint32_t length; // 元素个数
  int8_t contents[];
} intset;
```
encoding 的说明：虽然 contents 是 int8_t 类型，但实际上其存储的值是 int16_t、int32_t 或 int64_t，由 encoding 决定。  
整数集合适用于集合所有元素都是整数且集合元素数量较小的时候，优势在于集中存储，节省空间；虽然对于元素操作复杂度也由 O(1) 变为了 O(n)，但集合数量少的时候操作的时间并没有明显劣势。  

#### 编码转换
同时满足以下两个条件则使用整数集合：1）集合中的元素数量小于 512 个；2）集合中所有元素都是整数值。  
整数集合可转为哈希表，哈希表不能转为整数集合。



### 有序集合

#### 概况

与集合一样，元素都不能重复；  

与集合不同，元素是有顺序的；  

与列表不同，不以索引下标作为排序依据，而为每个元素设置一个分数（score）作为排序依据。  

#### 内部编码

压缩列表（ziplist）或跳跃表（skiplist）。  

1. ziplist  

   略。    

2. skiplist  

   是一种有序数据结构，通过在每个节点中维持多个指向其他节点的指针，达到快速访问节点的目的。  

   支持平均 O(logN)、最坏 O(N) 的复杂度进行节点查找，并支持顺序操作。  

   Redis 的跳跃表实现由 zskiplist 和 zskiplistNode 两个结构组成：前者用于保存跳跃表信息（如头结点、尾结点、长度等），后者用于表示跳跃表节点。  

   具体结构比较复杂，略。  

#### 编码转换

同时满足以下两个条件则使用 ziplist：1）元素总量小于 128；2）所有成员长度都不足 64 字节。  

可由 ziplist 转 skiplist，反向则不能。

## 应用举例

### 优化内存占用

#### 利用 jemalloc 特性进行优化  

由于 jemalloc 分配内存时数值是不连续的，因此 key/value 变化一个字节，可能会引起占用内存很大的变动。应注意一些特殊值。  

例，如果 key 的长度是 8 字节，则 SDS 为 17 字节（free+len+9），jemalloc 分配 32 字节；而若 key 的长度是 7 字节，则 SDS 为 16 字节，jemalloc 分配 16 字节。

![jemalloc-save-space](/images/jemalloc-save-space.png)

#### 使用整形

如果是整型/长整型，Redis 会使用 int 类型来存储，可节省空间。

#### 共享对象

利用共享对象，可以减少对象的创建，节省内部空间。  

使用 0-9999 这些整数，或可通过调整 REDIS_SHARED_INTEGERS 参数提高共享对象的个数。  

### 关注内存碎片率

内存碎片率过高（标准为 1.03）时，内存碎片多，可考虑重启 Redis。  

碎片率小于 1，则机器内存不足，可考虑拓展机器。  





> 本文参考自 [编程迷思博客](http://www.cnblogs.com/kismetv/p/8654978.html)



