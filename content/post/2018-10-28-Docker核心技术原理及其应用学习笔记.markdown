---
layout: post
title:  "「Docker核心技术原理及其应用学习笔记」"
date:   2018-10-28 16:17:54 +0800
tags: [docker]
---

# Docker概览

Docker 容器的概念约等于虚拟机。  



## Docker 底层

* Namespaces 命名空间

  为 Docker 容器提供操作系统层面的隔离

* Control Groups 控制组

  为 Docker 容器提供硬件层面的隔离

* Union File System 联合文件系统

  利用分层 layer 思想管理镜像和容器

# 镜像

镜像是一个 Docker 的可执行文件，通过镜像可以创建一个或多个容器。    

![docker镜像常用操作](/images/docker-image.png)



## 镜像搜索

* 命令格式：
  ​	docker search [OPTIONS] TERM

* 命令参数(OPTIONS)：


```
  	-f,  --filter filter   	根据提供的格式筛选结果
  	     --format string   	利用Go语言的format格式化输出结果
  	     --limit int       	展示最大的结果数，默认25个
  	     --no-trunc        	内容全部显示

```

## 本地镜像

### docker pull

作用：
​	下载远程仓库（如Docker Hub）中的镜像
命令格式：
​	`docker pull [OPTIONS] NAME[:TAG|@DIGEST]`
命令参数(OPTIONS)：
​	-a, --all-tags               	下载所有符合给定tag的镜像



### docker images

作用：
​	列出本地镜像
命令格式：
​	`docker images [OPTIONS][REPOSITORY[:TAG]]`  
​     或者  `docker image ls [OPTIONS][REPOSITORY[:TAG]]`  
命令参数(OPTIONS)：	
​	-a, --all             		展示所有镜像 (默认隐藏底层的镜像)
​	     --no-trunc        	不缩略显示
​	-q, --quiet           	只显示镜像ID

### docker rmi/docker image rm

作用：
​	将本地的一个或多个镜像删除
命令格式：
​	`docker rmi [OPTIONS] IMAGE [IMAGE...]`  
​     或者  `docker image rm [OPTIONS] IMAGE [IMAGE...]`  
命令参数(OPTIONS)：	 
​	-f, --force      		强制删除



### docker save

作用：  
​	将本地的一个或多个镜像打包保存成本地tar文件(输出到STDOUT)  
命令格式：  
​	`docker save [OPTIONS] IMAGE [IMAGE...]`  
命令参数(OPTIONS)：	  
​	-o, --output string   		指定写入的文件名和路径  

`docker save centos:7 > centosfile.tar`  

`docker save centos:7 -o centosfile.tar`  



save 的时候最好用指定名称+版本号的方式，不然 load 进来后名称和版本号就是 null。



### docker load



作用：  
​	将save命令打包的镜像导入本地镜像库中  
命令格式：  
​	`docker load [OPTIONS]`
命令参数(OPTIONS)：	  
​	-i,  --input string   	指定要打入的文件，如没有指定，默认是STDIN  
​	-q, --quiet          		不打印导入过程信息   

### docker tag 

作用：  
​	对本地镜像的NAME、TAG进行重命名，并新产生一个命名后镜像  
命令格式：  
​	`docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]`  

当对一个正常镜像重命名时，会新建一个引用；当对一个无名称和 tag 的镜像重命名时，会修改原镜像名称。  



### docker image inspect

作用：  
​	查看本地一个或多个镜像的详细信息  
命令格式：  
​	`docker image inspect [OPTIONS] IMAGE [IMAGE...]`  
命令参数(OPTIONS)：	 
​	-f, --format string          利用特定Go语言的format格式输出结果  

```python
E:\code\dockerfiles>docker image inspect -f "{{json .Metadata.LastTagTime}}" ubuntu
"0001-01-01T00:00:00Z"

E:\code\dockerfiles>docker image inspect -f "{{json .Metadata}}" ubuntu
{"LastTagTime":"0001-01-01T00:00:00Z"}
```

### docker history

作用：  
​	查看本地一个镜像的历史(历史分层)信息  
命令格式：  
​	`docker history [OPTIONS] IMAGE`  
命令参数(OPTIONS)：  
​	-H, --human		将创建时间、大小进行优化打印(默认为true)  
​	-q, --quiet           	只显示镜像ID  
​	     --no-trunc        	不缩略显示  



# 容器

容器是一种轻量级、可移植、并将应用程序进行打包的技术，使应用程序可以在几乎任何地方以相同的方式运行。  

Docker 将镜像文件运行起来后，产生的对象就是容器。容器相当于是镜像运行起来的一个实例。容器具备一定的生命周期。  

可以借助 docker ps 命令查看运行的容器。  

## 容器与虚拟机

### 相同点

* 硬件资源共享使用
* 生命周期相似
* 可以安装应用
* 数据会存储在宿主机上(/var/lib/docker/containers)

### 不同点

* 虚拟机是一个完整的操作系统，容器运行在宿主机的内核上（本质上一系列进程的结合）
* 容器轻量级，虚拟机重量级

## 容器的生命周期

![docker容器生命周期](/images/docker容器生命周期.png)

### 创建容器 docker create

作用：
​	利用镜像创建出一个Created 状态的待启动容器
命令格式：
​	`docker create [OPTIONS] IMAGE [COMMAND][ARG...]`
命令参数(OPTIONS)：查看更多
​	-t, --tty           		分配一个伪TTY，也就是分配虚拟终端
​      	-i, --interactive    	即使没有连接，也要保持STDIN打开
​          	     --name          		为容器起名，如果没有指定将会随机产生一个名称
命令参数（COMMAND\ARG）:
​	COMMAND 表示容器启动后，需要在容器中执行的命令，如ps、ls 等命令
​	ARG 表示执行 COMMAND 时需要提供的一些参数，如ps 命令的 aux、ls命令的-a等等

### 删除容器 docker rm

`docker rm [OPTIONS] CONTAINER [CONTAINER...]`

可以指定为容器的名字或 id。  

### 启动容器 docker start

作用：
​	将一个或多个处于创建状态或关闭状态的容器启动起来
命令格式：
​	`docker start [OPTIONS] CONTAINER [CONTAINER...]`
命令参数(OPTIONS)：
​	-a, --attach		将当前shell的 STDOUT/STDERR 连接到容器上
​	-i, --interactive		将当前shell的 STDIN连接到容器上	



只有创建的时候有 -i 参数，这里的 -i 才有效。  

### 创建容器并启动 docker run

作用：
​	利用镜像创建并启动一个容器
命令格式：
​	`docker run [OPTIONS] IMAGE [COMMAND][ARG...]`
命令参数(OPTIONS)：查看更多
​	-t, --tty           		分配一个伪TTY，也就是分配虚拟终端
​      	-i, --interactive    	即使没有连接，也要保持STDIN打开
​          	     --name          		为容器起名，如果没有指定将会随机产生一个名称
​	-d, --detach		在后台运行容器并打印出容器ID
​	--rm			当容器退出运行后，自动删除容器
命令参数（COMMAND\ARG）:
​	COMMAND 表示容器启动后，需要在容器中执行的命令，如ps、ls 等命令
​	ARG 表示执行 COMMAND 时需要提供的一些参数，如ps 命令的 aux、ls命令的-a等等  

* docker run 相当于 docker create + docker start –a       前台模式
* docker run -d 相当于 docker create + docker start       后台模式



### 容器关闭 docker stop

作用：
​	关闭一个或多个处于暂停状态或者运行状态的容器
命令格式：
​	`docker stop [OPTIONS] CONTAINER [CONTAINER...]`
命令参数(OPTIONS)：
​	-t, --time int   		关闭前，等待的时间，单位秒(默认 10s)	



stop 命令使用 kill -term 杀掉进程



### 容器终止 doker kill

作用：
​	强制并立即关闭一个或多个处于暂停状态或者运行状态的容器
命令格式：
​	`docker kill [OPTIONS] CONTAINER [CONTAINER...]`
命令参数(OPTIONS)：
​	-s, --signal string   	指定发送给容器的关闭信号 (默认“KILL”信号)



比如 kill -9 可以写为 docker kill 容器名 -s '9'



### 容器暂停/取消暂停 docker pause/unpause



作用：
​	暂停一个或多个处于运行状态的容器
命令格式：
​	`docker pause CONTAINER [CONTAINER...]`



作用：
​	取消一个或多个处于暂停状态的容器，恢复运行
命令格式：
​	`docker unpause CONTAINER [CONTAINER...]`



### 容器重启 docker restart

作用：
​	重启一个或多个处于运行状态、暂停状态、关闭状态或者新建状态的容器
命令格式：
​	docker restart [OPTIONS] CONTAINER [CONTAINER...]
命令参数(OPTIONS)：
​	 -t, --time int   		重启前，等待的时间，单位秒(默认 10s) 
​				实则是关闭前等待的时间	



**该命令相当于stop和start命令的结合**



## 容器信息
### 容器详细信息 docker container inspect

作用：
​	查看本地一个或多个容器的详细信息
命令格式：
​	`docker container inspect [OPTIONS] CONTAINER [CONTAINER...]`
​      或者 `docker inspect [OPTIONS] CONTAINER [CONTAINER...]`
命令参数(OPTIONS)：	
​	-f, --format string	利用特定Go语言的format格式输出结果
​	-s, --size		显示总大小



### 容器日志 docker logs

作用：
​	查看容器的日志信息
命令格式：
​	docker logs [OPTIONS] CONTAINER
命令参数(OPTIONS)：	
​	    --details		显示日志的额外信息
​	-f, --follow         		动态跟踪显示日志信息
​	    --since string  	只显示某事时间节点之后的	
 	    --tail string    		显示倒数的行数(默认全部)
​	-t, --timestamps     	显示timestamps时间
​	    --until string   	只显示某时间节点之前的
注意：
​	容器日志中记录的是容器主进程的输出STDOUT\STDERR，也就是说 attach 命令输出的会在 logs 中输出，而 exec 的则不会。



### 容器重命名 docker rename

作用：
​	修改容器的名称
命令格式：
​	`docker rename CONTAINER NEW_NAME`



## 容器运行时操作

### 容器连接 docker attach

作用：
​	将当前终端的STDIN、STDOUT、STDERR绑定到正在运行的容器的主进程上实现连接
命令格式：
​	docker attach [OPTIONS] CONTAINER
命令参数(OPTIONS)：	
​	--no-stdin             	不绑定STDIN



这个命令实际上是把当前的控制台绑定到 docker 容器的主进程（即 commond 执行的那个进程）上的，如果 commond 那个命令的进程退出了，那么这个 docker 容器运行也就终止了。



### 容器中执行新命令 docker exec

作用：
​	在容器中运行一个命令
命令格式：
​	docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
命令参数(OPTIONS)：	
​	-d, --detach               	后台运行命令
​	-i, --interactive		即使没连接容器，也将当前的STDIN绑定上
​	-t, --tty                  	分配一个虚拟终端
​	-w, --workdir string       	指定在容器中的工作目录
​	-e, --env list             	设置容器中运行时的环境变量



# 容器与镜像





![1547970788929](/images/1547970788929.png)



## 容器提交 docker commit

作用：
​	根据容器生成一个新的镜像
命令格式：
​	docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
命令参数(OPTIONS)：
​	-a, --author string    	作者
​	-c, --change list      	为创建的镜像加入Dockerfile命令
​	-m, --message string   	提交信息，类似git commit -m
​	-p, --pause            	提交时暂停容器 (default true)	